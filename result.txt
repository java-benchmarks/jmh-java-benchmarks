# JMH version: 1.33
# VM version: JDK 16.0.2, Java HotSpot(TM) 64-Bit Server VM, 16.0.2+7-67
# VM invoker: C:\dev\Java\jdk-16.0.2\bin\java.exe
# VM options: -Xms64M -Xmx512M -XX:+PrintGCDetails
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 3 iterations, 3 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.yulikexuan.benchmarks.jdk.StringInternBenchmark.testMap
# Parameters: (strAmt = 100)

# Run progress: 0.00% complete, ETA 00:00:24
# Fork: N/A, test runs in the host VM
# *** WARNING: Non-forked runs may silently omit JVM options, mess up profilers, disable compiler hints, etc. ***
# *** WARNING: Use non-forked runs only for debugging purposes, not for actual performance runs. ***
# Warmup Iteration   1: 829.580 ns/op
# Warmup Iteration   2: 941.774 ns/op
# Warmup Iteration   3: 1065.897 ns/op
Iteration   1: 1059.829 ns/op
Iteration   2: 1098.212 ns/op
Iteration   3: 1026.321 ns/op
Iteration   4: 1075.729 ns/op
Iteration   5: 1088.443 ns/op

Result "com.yulikexuan.benchmarks.jdk.StringInternBenchmark.testMap":
  1069.707 ±(99.9%) 108.568 ns/op [Average]
  (min, avg, max) = (1026.321, 1069.707, 1098.212), stdev = 28.195
  CI (99.9%): [961.139, 1178.274] (assumes normal distribution)


# Run complete. Total time: 00:00:24

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (strAmt)  Mode  Cnt     Score     Error  Units
StringInternBenchmark.testMap       100  avgt    5  1069.707 ± 108.568  ns/op
